# Criminality Rates in the US

## Data ini dari google collab ini menampilkan seberapa banyak tingkat kejahatan di AS

## Contoh kode Python yang digunakan

import os, zipfile, csv
import pandas as pd

def find_first_file(folder='/content/us_crime', exts=('.csv','.zip','.xlsx','.xls')):
    """Cari file pertama dengan ekstensi tertentu dalam folder."""
    if not os.path.isdir(folder):
        return None
    for fname in os.listdir(folder):
        if fname.lower().endswith(exts):
            return os.path.join(folder, fname)
    return None

def load_csv_smart(path=None, folder='/content/us_crime', nrows=None):
    """
    Load CSV/Excel/ZIP dengan strategi otomatis:
    - Jika path None -> cari file di folder
    - Coba encoding utf-8, latin1, cp1252
    - Jika parser error -> coba sniff delimiter (sep)
    - Bisa handle ZIP (ambil CSV pertama di dalamnya)
    """
    if path is None:
        path = find_first_file(folder)
        if path is None:
            raise FileNotFoundError(f"Tidak ada CSV/XLS/ZIP di {folder}. Jalankan '!ls -lah {folder}' untuk cek isi folder.")
    print("Mencoba load file:", path)

    if path.lower().endswith(('.xls','.xlsx')):
        df = pd.read_excel(path, nrows=nrows)
        print("Loaded Excel file:", path)
        return df

    if path.lower().endswith('.zip'):
        with zipfile.ZipFile(path) as zf:
            namelist = [n for n in zf.namelist() if not n.endswith('/')]
            print("Isi zip:", namelist)
            csvs = [n for n in namelist if n.lower().endswith('.csv')]
            if not csvs:
                raise RuntimeError("Tidak ada file CSV di dalam zip.")
            target = csvs[0]
            extract_path = os.path.join(folder, os.path.basename(target))
            print("Extract:", target, "→", extract_path)
            zf.extract(target, path=folder)
            path = extract_path

    for enc in ['utf-8', 'latin1', 'cp1252']:
        try:
            df = pd.read_csv(path, encoding=enc, low_memory=False, nrows=nrows)
            print(f"Sukses baca dengan encoding={enc}")
            return df
        except Exception as e:
            print(f"Gagal dengan encoding={enc}: {type(e).__name__} → {e}")

    try:
        with open(path, 'r', errors='replace') as f:
            sample = f.read(20000)
        dialect = csv.Sniffer().sniff(sample)
        sep = dialect.delimiter
        print("Sniffed delimiter:", repr(sep))
        df = pd.read_csv(path, sep=sep, engine='python', encoding='latin1',
                         low_memory=False, nrows=nrows, on_bad_lines='warn')
        print("Loaded dengan sniffed delimiter")
        return df
    except Exception as e:
        print("Sniff gagal:", e)


# Link Data Profiling Google Collab

https://colab.research.google.com/drive/1frcbGjZKoQVvu1sEIezGWqraQaaBsyel?usp=sharing
    df = pd.read_csv(path, sep=None, engine='python', encoding='latin1',
                     low_memory=False, nrows=nrows, on_bad_lines='warn')
    print("Loaded dengan engine=python sep=None")
    return df

df = load_csv_smart(folder='/content/us_crime')
print(df.shape)
df.head()
